##====---- appveyor.yml                                               ----====##
# CI for OpenCppCoverage.
# Nuget generation is just to be compatible with the default project files.
#

# fetch repository as a zip archive
shallow_clone: true

skip_branch_with_pr: true
skip_commits:
  files:
  - .github/
  - .gitignore
  - BuildThirdPartyDependencies.bat
  - CreateRelease.bat
  - LICENSE.txt
  - '**/*.md'
  - '**/*.filters'

cache:
- C:\Tools\vcpkg\installed #-> appveyor.yml # Delete cache on change
- C:\Tools\vcpkg\vcpkg.exe

image:
- Visual Studio 2017

platform:
- x86
- x64

configuration:
- Debug
- Release

environment:
  matrix:
  - DEPENDENCIES: HEAD
    NUGET: on
  - DEPENDENCIES: FREEZE
  global:
    APPVEYOR_SAVE_CACHE_ON_ERROR: true
    TOOLCHAIN_FILE: 'C:/Tools/vcpkg/scripts/buildsystems/vcpkg.cmake'
    FREEZE_SHA1: 2ac7527b40b1dbeb7856b9f763362c1e139e2ca9
    NUGET_version: 1.2.0

for:
-
  matrix:
    only:
    - NUGET: on
  cache:
  - C:\Tools\vcpkg\installed #-> appveyor.yml
  - C:\Tools\vcpkg\packages #-> appveyor.yml
  - C:\Tools\vcpkg\vcpkg.exe


install:
# Packages to install from vcpkg:
- ps: |
    $packages = @(
      'poco',
      'protobuf',
      'gtest',
      'ctemplate',
      'boost-optional',
      'boost-filesystem',
      'boost-algorithm',
      'boost-container',
      'boost-program-options',
      'boost-regex',
      'boost-range',
      'boost-log',
      'boost-property-tree',
      'boost-spirit',
      'boost-uuid',
      'boost-locale',
      'boost-iostreams',
      'range-v3'
    )
    $packages = $packages.ForEach({ "${_}:${env:PLATFORM}-windows" })
# Install latest version of vcpkg.exe
- cd C:\Tools\vcpkg && git pull --quiet
- ps: |
    if ( $(vcpkg upgrade) -match "^Warning: Different source.*for vcpkg" ) {
      .\bootstrap-vcpkg.bat 1>$null
      vcpkg integrate install 1>$null
    }
# Use a frozen vcpkg state for all dependencies
- ps: |
    if ( "$env:DEPENDENCIES" -eq "FREEZE" ) {
      git checkout $env:FREEZE_SHA1 --quiet
      git show --summary
    }
# Only build Release or Debug versions (for most packages)
- ps: |
    if ( "$env:CONFIGURATION" -eq "Release") {
      $triplet_build = 'set(VCPKG_BUILD_TYPE release)'
    } else {
      $triplet_build = 'set(VCPKG_BUILD_TYPE debug)'
    }
    $triplet_file = ".\triplets\${env:PLATFORM}-windows.cmake"
    $triplet_build | Out-File ${triplet_file} -Encoding ascii -Append
# Display cache state
- vcpkg list
- vcpkg update
# Updating cached dependencies
- ps: |
    if (!($(vcpkg upgrade) -match "^All installed packages are up-to-date")) {
      vcpkg upgrade --no-dry-run
    }
# Install new dependencies
- ps: |
    foreach ($item in $packages) {
      vcpkg install $item
    }
# Create or fake a NuGet package
- ps: |
    if ( $env:NUGET -and "$env:NUGET" -eq "on" ) {
      vcpkg export ${packages} --nuget --nuget-id=ThirdParty --nuget-version=${env:NUGET_version}
      $(nuget) | Select-Object -First 1 # display version
      nuget install ThirdParty -Source C:\Tools\vcpkg -OutputDirectory ${env:APPVEYOR_BUILD_FOLDER}\packages
    } else {
      $dir = "${env:APPVEYOR_BUILD_FOLDER}\packages\thirdparty.${env:NUGET_version}"
      mkdir "${dir}\build\native" | pushd
      '<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" />' > thirdparty.targets
      popd
      mkdir "${dir}\installed\${env:PLATFORM}-windows" | pushd
      cmd /c mklink /j "tools" "C:\Tools\vcpkg\installed\${env:PLATFORM}-windows\tools"
      popd
    }

before_build:
- ps: cd ${env:APPVEYOR_BUILD_FOLDER}

build_script:
- >-
  MSBuild
  -nologo
  -verbosity:minimal
  -p:Configuration="%CONFIGURATION%"
  -p:Platform="%PLATFORM%"
  -logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"

test_script:
- ps: |
    $gtest_list = @(
      'ToolsTest.exe',
      'FileFilterTest.exe',
      'CppCoverageTest.exe'
      'ExporterTest.exe'
      'OpenCppCoverageTest.exe'
    )
    $mstest_list = @(
      'DefaultTest.dll'
    )
    if ( "${env:PLATFORM}" -eq "x64" ) {
      $gtest_list = $gtest_list.ForEach({
        "${env:APPVEYOR_BUILD_FOLDER}\${env:PLATFORM}\${env:CONFIGURATION}\${_}"
      })
      $mstest_list = $mstest_list.ForEach({
        "${env:APPVEYOR_BUILD_FOLDER}\${env:PLATFORM}\${env:CONFIGURATION}\${_}"
      })
    } else {
      $gtest_list = $gtest_list.ForEach({
        "${env:APPVEYOR_BUILD_FOLDER}\${env:CONFIGURATION}\${_}"
      })
      $mstest_list = $mstest_list.ForEach({
        "${env:APPVEYOR_BUILD_FOLDER}\${env:CONFIGURATION}\${_}"
      })
    }
    if ("$env:APPVEYOR_BUILD_WORKER_IMAGE" -match "Visual Studio 2017") {
      $extensions = "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\Extensions\"
    }
    $TestAdapterPath = (
      Get-ChildItem -Path ${extensions} -Recurse |
      Where-Object { $_.Name -eq 'GoogleTestAdapter.TestAdapter.dll' } |
      Select-Object -First 1
    ).DirectoryName
    if (! $TestAdapterPath) { Write-Error "Can't find GoogleTestAdapter." }
    $runsettings = "${env:APPVEYOR_BUILD_FOLDER}\GoogleTestAdapter.runsettings"

    foreach ($exec in $gtest_list) {
      VSTest.Console "${exec}" /TestAdapterPath:"${TestAdapterPath}" /Settings:"${runsettings}" /logger:Appveyor
    }
    foreach ($exec in $mstest_list) {
      VSTest.Console "${exec}" /logger:Appveyor
    }
